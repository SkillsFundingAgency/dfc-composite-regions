using System;
using System.ComponentModel.DataAnnotations;
using DFC.Swagger.Standard.Annotations;
using Microsoft.AspNetCore.Html;

namespace DFC.Composite.Regions.Models
{
    public class Region
    {
        [Display(Description = "Unique cosmos db document identifier.  This is auto-generated by CosmosDB.")]
        [Example(Description = "5c2f8936-55ec-480c-b8cd-fee370cb748c")]
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public Guid DocumentId { get; set; }

        [Display(Description = "The path of the registered application.")]
        [Example(Description = "explore-careers")]
        [Required]
        public string Path { get; set; }

        [Display(Description = "The region on a page to which the application endpoint will supply data for.")]
        [Example(Description = "5")]
        [Required]
        public int PageRegion { get; set; }

        [Display(Description = "Indicator stating that the application endpoint is working as expected. ")]
        [Example(Description = "true")]
        public bool IsHealthy { get; set; }

        [Display(Description = "A url to the application that supplies content for the given area.")]
        [Example(Description = "https://ncs.careers.azurewebsites/explore/sidebar")]
        [Required]
        public string RegionEndpoint { get; set; }

        [Display(Description = "Indicator stating that the application endpoint has a health check endpoint that requires monitoring by the HealthService. ")]
        [Example(Description = "true")]
        public bool HeathCheckRequired { get; set; }

        [Display(Description = "If the application is marked as unhealthy then this markup will be used to populate the region.")]
        [Example(Description = "<b>Service unavailable</b>")]
        public string OfflineHtml { get; set; }

        [Display(Description = "UTC date and time the region was registered.")]
        [Example(Description = "2019-05-01T13:32:00")]
        public DateTime DateOfRegistration { get; set; }

        [Display(Description = "UTC date and time of when the region was last updated.")]
        [Example(Description = "2019-05-01T13:32:00")]
        public DateTime LastModifiedDate { get; set; }
    }
}
